@page
@model ZEM_Enterprice_WebApp.Pages.Department.Warehouse.WorkersModel
@{
    ViewData["Title"] = "Raport pracowników";
}

    <div class="container" style="background-color: #ffffff; width: 90%; margin: auto;">
        <div class="row">
            <div class="col-sm"></div>
            <div class="col-sm" style="text-align: center; width: 70%">
                <form method="post">
                    <h2>Raport pracowników</h2>
                    <div class="form-group"><label asp-for="@Model.DateFrom"></label></div>
                    <div class="form-group"><input id="dataFrom" class="form-control" asp-for="@Model.DateFrom"></div>
                    <div class="form-group"><label asp-for="@Model.DateTo"></label></div>
                    <div class="form-group"><input id="dataTo" class="form-control" asp-for="@Model.DateTo"></div>

                    <button asp-page-handler="UpdateData" class="btn btn-primary btn-block" type="submit">
                        Wyświetl
                    </button>
                    <button asp-page-handler="DownloadData" class="btn btn-primary btn-block" type="submit">
                        Pobierz jako CSV
                    </button>
                    <button asp-page-handler="DownloadHourData" class="btn btn-primary btn-block" type="submit">
                        Pobierz godzinowy CSV
                    </button>
                </form>
            </div>
            <div class="col-sm"></div>
        </div>
        <hr>
        <div class="row">
            <div class="col-5">
                <canvas id="myChart" width="100" height="100"></canvas>
            </div>
            <div class="col align-self-center">
                <h2>Ilość zeskanowanych przewodów na użytkownika</h2>
            </div>
        </div>
        <div class="row">
            <div class="col align-self-center">
                <h2>Skanowania w czasie</h2>
            </div>
            <div class="col-6">
                <canvas id="myLineChart" width="100" height="100"></canvas>
            </div>
        </div>
    </div>

<script src="~/assets/js/Chart.bundle.js"></script>
<script src="~/assets/customjs/ScanCommunicate.js"></script>


<script>
    function AddToConfig(config, number, label) {
        config["data"]["datasets"][0]["data"].push(number);
        config["data"]["datasets"][0]["backgroundColor"].push('#' + Math.floor(Math.random() * 16777215).toString(16));
        config["data"]["labels"].push(label);
    }

    function AddToLineChart(config, labels, values, user) {
        color = '#' + Math.floor(Math.random() * 16777215).toString(16);

        config["data"]["labels"] = labels;
        config["data"]["datasets"].push({
            label: user,
            backgroundColor: color,
            borderColor: color,
            fill: false,
            data: values,
        })
    }

    var getDaysArray = function (start, end) {
        for (var arr = [], dt = new Date(start); dt <= end; dt.setDate(dt.getDate() + 1)) {
            arr.push((new Date(dt)).formatDDMMYYYY());
        }
        return arr;
    };

    Date.prototype.formatDDMMYYYY = function () {
        return this.getDate() +
            "/" + (this.getMonth()+1) +
            "/" + this.getFullYear();
    }

    window.onload = async function () {
        var constructed_api_url = api_url + "users/" +
            "@Model.DateFrom.Day," + "@Model.DateFrom.Month," + "@Model.DateFrom.Year," +
            "@Model.DateTo.Day," + "@Model.DateTo.Month," + "@Model.DateTo.Year";

        pieChartConfig = {
            type: 'pie',
            data: {
                datasets: [{
                    data: [

                    ],
                    backgroundColor: [

                    ],
                    label: 'Dataset 1'
                }],
                labels: [

                ]
            },
            options: {
                responsive: true
            }
        };

        const response = await fetch(constructed_api_url);
        const d = await response.json();
        d.forEach(function (entry) {
            AddToConfig(pieChartConfig, entry["scansDone"], entry["user"]);
        });
        console.log(d);
        var constructed_api_url = api_url + "userstime/" +
            "@Model.DateFrom.Day," + "@Model.DateFrom.Month," + "@Model.DateFrom.Year," +
            "@Model.DateTo.Day," + "@Model.DateTo.Month," + "@Model.DateTo.Year";

        lineChartConfig = config = {
            type: 'line',
            data: {
                labels: getDaysArray(new Date("@Model.DateFrom.Year-@Model.DateFrom.Month-@Model.DateFrom.Day"), new Date("@Model.DateTo.Year-@Model.DateTo.Month-@Model.DateTo.Day")),
                datasets: []
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Skanowania w czasie'
                },
                scales: {
                    xAxes: [{
                        display: true,
                    }],
                    yAxes: [{
                        display: true,
                    }]
                }
            }
        };

        const response2 = await fetch(constructed_api_url);
        const d2 = await response2.json();
        console.log(d2);

        d2.forEach(function (entry) {
            AddToLineChart(lineChartConfig, entry["dates"], entry["values"], entry["user"]);
        });

        myChart = new Chart(document.getElementById('myChart'), pieChartConfig);
        myChart.update();

        myLineChart = new Chart(document.getElementById('myLineChart'), lineChartConfig);
        myLineChart.update();
        };

</script>
